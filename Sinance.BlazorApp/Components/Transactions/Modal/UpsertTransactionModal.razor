@using Sinance.Application.Command.Transaction
@using Sinance.BlazorApp.Business.Model.Transaction
@using Sinance.BlazorApp.Business.Services
@using Sinance.BlazorApp.Components.Transactions.Form
@using Sinance.Domain.Model
@using Sinance.Infrastructure
@inject ITransactionService transactionService
@inject IUserIdProvider _userProvider
@inject IMediator _mediator

<BSModal @ref="modal" IsStaticBackdrop="true" DataId="UpsertTransactionModal" OnHide="OnHide">
    <Header>@ModalHeader</Header>
    <Content>
        @if (upsertTransaction != null)
        {
            <UpsertTransactionForm FormId="UpsertTransactionForm"
                               UpsertTransaction="upsertTransaction"
                               OnValidSubmit="async(transaction) => await UpsertTransaction(transaction)" />
        }
    </Content>
    <Footer Context="modal">
        <button class="btn btn-default" Color="BSColor.Secondary" @onclick="modal.HideAsync" type="button">Close</button>
        <button class="btn btn-primary" form="UpsertTransactionForm" type="submit">Save changes</button>
    </Footer>
</BSModal>

@code {
    private UpsertTransactionModel upsertTransaction;

    [Parameter]
    public EventCallback<TransactionUpsertedEvent> OnTransactionsUpserted { get; set; }

    private BSModal modal { get; set; }

    private string ModalHeader => upsertTransaction?.IsNew == true ? "Create Transaction" : "Update transaction";

    public async Task OpenForNewTransactionAsync(int? bankAccountId)
    {
        upsertTransaction = new()
            {
                BankAccountId = bankAccountId,
                Date = DateTime.Today
            };

        await modal.ShowAsync();
    }

    public void OnHide()
    {
        upsertTransaction = null;
    }

    public async Task OpenForNewTransactionFromSourceAsync(TransactionModel transaction, int bankAccountId)
    {
        upsertTransaction = transaction.ToUpsertModel(bankAccountId);
        upsertTransaction.MarkAsNew();

        await modal.ShowAsync();
    }

    public async Task OpenForExistingTransactionAsync(TransactionModel transaction, int bankAccountId)
    {
        upsertTransaction = transaction.ToUpsertModel(bankAccountId);

        await modal.ShowAsync();
    }

    public async Task UpsertTransaction(UpsertTransactionModel validTransaction)
    {
        var upsertedTransaction = await CreateOrUpdateTransaction(validTransaction);

        await OnTransactionsUpserted.InvokeAsync(new TransactionUpsertedEvent
            {
                Created = validTransaction.IsNew,
                Transaction = upsertedTransaction.ToTransactionModel()
            });

        await modal.HideAsync();
    }
    private async Task<AccountTransaction> CreateOrUpdateTransaction(UpsertTransactionModel validTransaction)
    {
        if (validTransaction.IsNew)
        {
            return await _mediator.Send(new CreateAccountTransactionCommand
                {
                    UserId = _userProvider.GetCurrentUserId(),
                    CreationModel = new Application.Model.AccountTransactionCreationModel
                    {
                        Amount = validTransaction.Amount,
                        BankAccountId = validTransaction.BankAccountId.Value,
                        CategoryId = validTransaction.CategoryId,
                        Date = validTransaction.Date,
                        Description = validTransaction.Description,
                        DestinationAccountNumber = validTransaction.DestinationAccountNumber,
                        Name = validTransaction.Name,
                        SourceAccountNumber = validTransaction.SourceAccountNumber
                    }
                });
        }
        else
        {
            return await _mediator.Send(new UpdateAccountTransactionCommand
                {
                    UserId = _userProvider.GetCurrentUserId(),
                    TransactionId = validTransaction.Id,
                    UpdateModel = new Application.Model.AccountTransactionUpdateModel
                    {
                        Amount = validTransaction.Amount,
                        CategoryId = validTransaction.CategoryId,
                        Date = validTransaction.Date,
                        Description = validTransaction.Description,
                        DestinationAccountNumber = validTransaction.DestinationAccountNumber,
                        Name = validTransaction.Name,
                        SourceAccountNumber = validTransaction.SourceAccountNumber
                    }
                });
        }
    }
}