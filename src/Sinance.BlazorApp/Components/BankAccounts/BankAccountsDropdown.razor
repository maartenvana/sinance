@inject Sinance.BlazorApp.Business.Services.IBankAccountService bankAccountService
@using Sinance.BlazorApp.Business.Model.BankAccount 
@using System.Diagnostics.CodeAnalysis

@inherits InputSelect<int?>

<InputSelect class="form-control" @bind-Value="CurrentValueAsString">
    @if(IncludeAllOption)
    {
        <option value="@BankAccountModel.All.Id">All</option>
    }
    @foreach(var bankAccount in BankAccounts)
    {
        <option value="@bankAccount.Id">@bankAccount.Name</option>
    }
</InputSelect>

@code {
    [Parameter]
    public bool IncludeAllOption { get; set; }
    
    public string SelectedBankAccountId { get; set; }

    public List<BankAccountModel> BankAccounts { get; set; }

    protected override void OnInitialized()
    {
        BankAccounts = bankAccountService.GetAllBankAccounts();

        base.OnInitialized();
    }
    
    protected override string FormatValueAsString(int? value)
    {
        return value?.ToString() ?? "0";
    }

    protected override bool TryParseValueFromString(string value, [MaybeNullWhen(false)] out int? result, [NotNullWhen(false)] out string validationErrorMessage)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            validationErrorMessage = null;
            result = null;
        }
        else if (int.TryParse(value, out var bankAccountId))
        {
            validationErrorMessage = null;

            result = bankAccountId;
        }
        else
        {
            validationErrorMessage = "Selected value is not an int";
            result = null;
        }

        return true;
    }
}
