@page "/Transactions/Search"
@inject Sinance.BlazorApp.Business.Services.ITransactionService transactionService
@using Sinance.BlazorApp.Business.Model.Transaction

<BodyContent Title="Transaction Search">
    <div class="container-fluid">
        <div class="card shadow mb-4">
            <div class="card-header">
                Filter
            </div>
            <div class="card-body">
                <EditForm Model="@FilterModel" OnValidSubmit="DoSearch">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label for="name">Name</label>
                                <input type="text" id="name" class="form-control border-1 small" placeholder="Name" @bind="FilterModel.Name">
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <label for="name">Description</label>
                                <input type="text" id="name" class="form-control border-1 small" placeholder="Description" @bind="FilterModel.Description">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div class="form-group">
                                <label for="name">Category</label>
                                <CategoriesDropdown @bind-Category="FilterModel.Category"></CategoriesDropdown>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <label for="name">Bank Account</label>
                                <BankAccountsDropdown @bind-BankAccount="FilterModel.BankAccountId"></BankAccountsDropdown>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 pt-2">
                            <button class="btn btn-primary float-right" type="submit">Search</button>
                        </div>
                    </div>
                </EditForm>
            </div>

        </div>
        <div class="card shadow mb-4">
            @if (Transactions.Any())
            {
                <TransactionTable Transactions="Transactions"></TransactionTable>
            }

            @if(Loading)
            {
                <LoadingAnimation></LoadingAnimation>
            } 
            else if(MoreTransactionsAvailable)
            {
                <button class="btn btn-block btn-primary" @onclick="LoadMoreTransactions">Load More</button>
            }
        </div>
    </div>
</BodyContent>

@code {
    public SearchTransactionsFilterModel FilterModel;

    public List<TransactionModel> Transactions { get; set; }

    public int PageSize = 100;

    public bool MoreTransactionsAvailable = false;

    public bool Loading = true;

    protected override async Task OnInitializedAsync()
    {
        FilterModel = new SearchTransactionsFilterModel
        {
            Page = 0,
            PageSize = PageSize
        };
        Transactions = new List<TransactionModel>();

        await DoSearch();

        base.OnInitialized();
    }

    public async Task DoSearch()
    {
        Transactions = new List<TransactionModel>();
        MoreTransactionsAvailable = false;
        await LoadMoreTransactions();
    }

    public async Task LoadMoreTransactions()
    {
        Loading = true;

        try
        {
            if (Transactions.Any())
            {
                FilterModel.Page++;
            }

            var foundTransactions = await transactionService.SearchTransactionsPaged(FilterModel);

            MoreTransactionsAvailable = foundTransactions.Count == PageSize;

            Transactions.AddRange(foundTransactions);
        }
        catch(Exception)
        {
            // TODO: Show alert!
        }
        finally
        {
            Loading = false;
        }
    }
}
