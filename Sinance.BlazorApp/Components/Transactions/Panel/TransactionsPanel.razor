@inject Sinance.BlazorApp.Business.Services.ITransactionService transactionService
@inject IUserNotificationService userNotificationService
@using Sinance.BlazorApp.Business.Model.Transaction
@using Sinance.BlazorApp.Components.Transactions.Modal
@using Sinance.BlazorApp.Components.Core.PagingTable
@using System.Globalization
@using static Sinance.BlazorApp.Components.Transactions.Modal.SplitTransactionModal

@using static Sinance.BlazorApp.Components.Transactions.Modal.SelectTransactionCategoryModal

<div class="card shadow mb-4">
    <div class="card-header">
        <ul class="nav nav-pills card-header-pills float-end">
            <li class="nav-item">
                <button class="nav-link" @onclick="OpenCategorySelectionModalForSelected">Set Category</button>
            </li>
        </ul>
    </div>
    <div class="card-body no-padding">
        <SelectablePagingTable @ref=table
                               Page="FilterModel.Page"
                               PageSize="FilterModel.PageSize"
                               TRowDataType="TransactionModel"
                               LoadMoreFunc="LoadMoreTransactionsAsync"
                               TableCss="transaction-table"
                               RowIdFunc="GetTransactionId">
            <HeaderTemplate>
                <th class="date">Date</th>
                <th class="category">Type</th>
                <th class="name">Name</th>
                <th class="amount">Amount</th>
                <th class="description">Description</th>
                <th class="actions"></th>
            </HeaderTemplate>
            <RowTemplate Context="row">
                <td class="date" width="100">
                    @row.RowData.Date.ToShortDateString()
                </td>
                <td class="category" width=75>
                    @if (row.RowData.CategoryShortName != null)
                    {
                        <span class="badge badge-secondary pointer"
                          style="background-color: @row.RowData.CategoryColorCode"
                          @onclick="async () => await OpenCategoryModalForSingle(row.RowData)">
                            @row.RowData.CategoryShortName
                        </span>
                    }
                    else
                    {
                        <span class="badge badge-secondary pointer"
                          style="color: black"
                          @onclick="async () => await OpenCategoryModalForSingle(row.RowData)">
                            <span class="oi oi-plus"></span>
                        </span>
                    }
                </td>
                <td class="name">
                    @row.RowData.Name
                </td>
                <td class="amount">
                    <span class="badge bg-@(row.RowData.Amount > 0 ? "success" : "danger")">
                        @row.RowData.Amount.ToString("C2", CultureInfo.CurrentCulture)
                    </span>
                </td>
                <td class="description">
                    @row.RowData.Description
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="async () => OpenSplitTransactionModalForSingle(row.RowData)">Split</button>
                </td>
            </RowTemplate>
        </SelectablePagingTable>

        <SelectTransactionCategoryModal @ref="selectTransactionCategoryModal"
                                        OnTransactionsUpdated="TransactionsUpdated"></SelectTransactionCategoryModal>
                                        
        <SplitTransactionModal @ref="splitTransactionModal"
                                        OnTransactionsUpdated="TransactionsSplitted"></SplitTransactionModal>
    </div>
</div>

@code {
    [Parameter]
    public SearchTransactionsFilterModel FilterModel { get; set; } = new();

    private SelectTransactionCategoryModal selectTransactionCategoryModal;
    private SplitTransactionModal splitTransactionModal;

    private SelectablePagingTable<TransactionModel> table;

    public async Task RefreshAsync() => await table.RefreshAsync();

    public string GetTransactionId(TransactionModel model) => model.Id.ToString();

    public async void OpenSplitTransactionModalForSingle(TransactionModel transaction) =>
        await splitTransactionModal.OpenForTransactionsAsync(transaction);

    public async void OpenCategorySelectionModalForSelected()
    {
        if (table.SelectedRows.Any())
        {
            await selectTransactionCategoryModal.OpenForTransactionsAsync(table.SelectedRows);
        }
        else
        {
            userNotificationService.ShowError("No transactions selected");
        }
    }

    public async Task OpenCategoryModalForSingle(TransactionModel transaction) =>
        await selectTransactionCategoryModal.OpenForTransactionsAsync(new List<TransactionModel> { transaction });

    public void TransactionsSplitted(TransactionsSplittedEvent eventData)
    {
        table.UpdateRowData(
            eventData.OriginalTransaction.Id.ToString(),
            eventData.NewTransactions);

        userNotificationService.ShowSuccess($"Transaction was split into {eventData.NewTransactions.Count} new transaction(s)");
    }

    public void TransactionsUpdated(TransactionsCategoryUpdatedEvent eventModel)
    {
        foreach (var newTransaction in eventModel.Transactions)
        {
            table.UpdateRowData(newTransaction.Id.ToString(), newTransaction);
        }

        userNotificationService.ShowSuccess($"Updated {eventModel.Transactions.Count} transaction(s) categories");
    }

    public async Task<List<TransactionModel>> LoadMoreTransactionsAsync(int page, int pageSize)
    {
        try
        {
            FilterModel.PageSize = pageSize;
            FilterModel.Page = page;

            return await transactionService.SearchTransactionsPagedAsync(FilterModel);
        }
        catch (Exception)
        {
            userNotificationService.ShowError("Exception during transaction retrieval");

            return new List<TransactionModel>();
        }
        finally
        {
            StateHasChanged();
        }
    }
}
