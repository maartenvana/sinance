@using System.Linq
@using Sinance.Web.Model

@model AccountOverviewViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
    <script type="text/javascript">
        var selectedTransaction = -1;
        var action = "";

        $(function() {
            $("body").popover({
                content: function() {
                    return $("#CategoryList").html();
                },
                html: true,
                trigger: "focus",
                placement: "right",
                title: "Kies een categorie",
                selector: ".transactionCategoryBox",
                viewport: { selector: "#TransactionOverviewTable", padding: 0 }
            });

            $("#overviewModal").on("show.bs.modal", function() {
                var contentUrl = "";
                if (action === "details") {
                    contentUrl = "@Url.Action("EditTransaction", "AccountOverview")" + "?transactionId=" + selectedTransaction;
                } else if (action === "add") {
                    contentUrl = "@Url.Action("AddTransaction", "AccountOverview")" + "?bankAccountId=" + @Model.Account.Id;
                }

                $.ajax({
                    type: "GET",
                    url: contentUrl,
                    success: function(response) {
                        $("#overviewModalContent").html(response);
                    }
                });
            });

            $("#overviewModal").on("hidden.bs.modal", function() {
                $("#overviewModalContent").html("");
            });
        });

        function SetSelectedTransaction(transactionId, category) {
            selectedTransaction = transactionId;

            $(".popoverSelectedCategory").removeClass("popoverSelectedCategory");

            if (categories !== undefined && categories !== null) {
                $.each(categories, function(index, value) {
                    $(".category" + value).addClass("popoverSelectedCategory");
                });

                if (category !== undefined) {
                    var categoryOffset = $(".category" + category).offset().top;
                    $(".CategoryPopoverList").scrollTop(categoryOffset - $(".CategoryPopoverList").offset().top);
                }
            }
        }

        function SetTransactionCategory(categoryId) {
            var transactionId = selectedTransaction;

            $.ajax({
                type: "POST",
                url: "@Url.Action("QuickChangeTransactionCategory")",
                data: { transactionId: transactionId, categoryId: categoryId },
                success: function(response) {
                    if (response != undefined && response.Success === false) {
                        bootbox.alert(response.ErrorMessage);
                    } else {
                        $("#TransactionRow" + transactionId).replaceWith(response);
                    }

                }
            });
        }

        function RemoveTransactionCategory() {
            var transactionId = selectedTransaction;

            $.ajax({
                type: "POST",
                url: "@Url.Action("QuickRemoveTransactionCategory")",
                data: { transactionId: transactionId },
                success: function(response) {
                    if (response != undefined && response.Success === false) {
                        bootbox.alert(response.ErrorMessage);
                    } else {
                        $("#TransactionRow" + transactionId).replaceWith(response);
                    }

                }
            });

        }
    </script>
}

<div class="row">
    <div class="col-lg-12">
        <h1 class="page-header">@Model.Account.Name <span class="pull-right label label-info">€ @Html.DisplayFor(item => item.AccountBalance)</span></h1>
    </div>
</div>

@await Component.InvokeAsync("BalanceHistoryGraph", new { months = 12, grouped = false, filter = new int[] { Model.Account.Id } })

<div class="panel panel-default">
    <div class="panel-heading clearfix">
        <h5 class="pull-left">Transacties</h5>
        <button data-toggle="modal" data-target="#overviewModal" onclick="action='add';" type="button" class="btn btn-primary pull-right"><span class="glyphicon glyphicon-plus"></span></button>
    </div>
    <div class="panel-body">
        <div class="row">
            <div class="col-xs-12">
                <h2>Filter</h2>
                <div class="row">
                    <div class="col-xs-12">

                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12">
                        <button type="submit">Filter</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12">
                @await Html.PartialAsync("TransactionsEditTable", Model.Transactions)
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="overviewModal" tabindex="-1" role="dialog" aria-labelledby="overviewModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div id="overviewModalContent" class="modal-content">
        </div>
    </div>
</div>

<div id="CategoryList" class="hidden">
    <div class="CategoryPopoverList clearfix">
        <div class="categoryPopoverListItem category0" onclick="RemoveTransactionCategory();">
            <div class="transactionCategoryBox-sm" style="background-color: #FFFFFF"></div><span> Geen categorie</span>
        </div>
        @foreach (var category in Model.AvailableCategories.Where(x => x.ParentId == null).OrderBy(x => x.Name))
        {
            <div class="categoryPopoverListItem category@(category.Id)" onclick="SetTransactionCategory(@category.Id);">
                <div class="transactionCategoryBox-sm" style="background-color: @(category.ColorCode)"></div><span> @category.Name</span>
            </div>
            foreach (var subCategory in Model.AvailableCategories.Where(x => x.ParentId == category.Id).OrderBy(x => x.Name))
            {
                <div class="categoryPopoverListItem category@(subCategory.Id)" onclick="SetTransactionCategory(@subCategory.Id);">
                    <span>-</span>
                    <div class="transactionCategoryBox-sm" style="background-color: @(subCategory.ColorCode)"></div><span> @subCategory.Name</span>
                </div>
            }
        }
    </div>
</div>