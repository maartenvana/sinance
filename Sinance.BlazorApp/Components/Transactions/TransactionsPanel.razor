@inject Sinance.BlazorApp.Business.Services.ITransactionService transactionService
@inject IUserErrorService userErrorService
@using Sinance.BlazorApp.Business.Model.Transaction
@using Sinance.BlazorApp.Components.Core.PagingTable
@using System.Globalization

<div class="card shadow mb-4">
    <div class="card-header">
        <button class="btn btn-primary" @onclick="OpenCategorySelectionModalForSelected">Set Category</button>
    </div>
    <div class="card-body no-padding">
            <SelectablePagingTable 
                @ref=table
                Page="FilterModel.Page"
                PageSize="FilterModel.PageSize"
                TRowDataType="TransactionModel" 
                LoadMoreFunc="LoadMoreTransactionsAsync"
                RowIdFunc="GetTransactionId">
                <HeaderTemplate>
                    <th class="date">Date</th>
                    <th class="category">Type</th>
                    <th class="name">Name</th>
                    <th class="amount">Amount</th>
                    <th class="description">Description</th>
                </HeaderTemplate>
                <RowTemplate Context="row">
                    <td class="date">
                        @row.RowData.Date.ToShortDateString()
                    </td>
                    <td class="category">
                        @if (row.RowData.CategoryShortName != null)
                        {
                            <span 
                                class="badge badge-secondary pointer" 
                                style="background-color: @row.RowData.CategoryColorCode" 
                                @onclick="async () => await OpenCategoryModalForSingle(row.RowData)">
                                @row.RowData.CategoryShortName
                            </span>
                        }
                        else
                        {
                            <span 
                                class="badge badge-secondary pointer" 
                                @onclick="async () => await OpenCategoryModalForSingle(row.RowData)">
                                <span class="oi oi-plus"></span>
                            </span>
                        }
                    </td>
                    <td class="name">
                        @row.RowData.Name
                    </td>
                    <td class="amount">
                        <span class="badge badge-@(row.RowData.Amount > 0 ? "success" : "danger")">
                            @row.RowData.Amount.ToString("C2", CultureInfo.CurrentCulture)
                        </span>
                    </td>
                    <td class="description">
                        @row.RowData.Description
                    </td>
                </RowTemplate>
            </SelectablePagingTable>

            <SelectTransactionCategoryModal @ref="selectTransactionCategoryModal"
                OnTransactionsUpdated="TransactionsUpdated"></SelectTransactionCategoryModal>
    </div>
</div>

@code {
    [Parameter]
    public SearchTransactionsFilterModel FilterModel { get; set; } = new();

    private SelectTransactionCategoryModal selectTransactionCategoryModal;

    private SelectablePagingTable<TransactionModel> table;

    public async Task RefreshAsync() => await table.RefreshAsync();

    public string GetTransactionId(TransactionModel model) => model.Id.ToString();

    public async void OpenCategorySelectionModalForSelected() =>
        await selectTransactionCategoryModal.OpenForTransactionsAsync(table.SelectedRows);

    public async Task OpenCategoryModalForSingle(TransactionModel transaction) =>
        await selectTransactionCategoryModal.OpenForTransactionsAsync(new List<TransactionModel> { transaction });

    public void TransactionsUpdated(List<TransactionModel> newTransactions)
    {
        foreach (var newTransaction in newTransactions)
        {
            table.UpdateRowData(newTransaction.Id.ToString(), newTransaction);
        }
    }

    public async Task<List<TransactionModel>> LoadMoreTransactionsAsync(int page, int pageSize)
    {
        try
        {
            FilterModel.PageSize = pageSize;
            FilterModel.Page = page;

            return await transactionService.SearchTransactionsPaged(FilterModel);
        }
        catch (Exception)
        {
            userErrorService.ShowErrorToUser("Exception during transaction retrieval");

            return new List<TransactionModel>();
        }
        finally
        {
            StateHasChanged();
        }
    }
}
