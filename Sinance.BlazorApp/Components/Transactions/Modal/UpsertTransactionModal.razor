@using Sinance.BlazorApp.Business.Model.Transaction
@using Sinance.BlazorApp.Business.Services
@using Sinance.BlazorApp.Components.Transactions.Form
@inject ITransactionService transactionService


<BSModal @ref="modal" DataId="modal1" OnHide="OnHide">
    <Header>@ModalHeader</Header>
    <Content>
        @if (upsertTransaction != null)
        {
            <UpsertTransactionForm 
                FormId="UpsertTransactionForm" 
                UpsertTransaction="upsertTransaction"
                OnValidSubmit="async(transaction) => await UpsertTransaction(transaction)" />
        }
    </Content>
    <Footer Context="modal">
        <button class="btn btn-default" Color="BSColor.Secondary" @onclick="modal.HideAsync" type="button">Close</button>
        <button class="btn btn-primary" form="UpsertTransactionForm" type="submit">Save changes</button>
    </Footer>
</BSModal>

@code {
    private UpsertTransactionModel upsertTransaction;

    [Parameter]
    public EventCallback<TransactionUpsertedEvent> OnTransactionsUpserted { get; set; }

    private BSModal modal { get; set; }

    private string ModalHeader => upsertTransaction?.IsNew == true ? "Create Transaction" : "Update transaction";

    public async Task OpenForNewTransactionAsync(int? bankAccountId)
    {
        upsertTransaction = new()
            {
                BankAccountId = bankAccountId,
                Date = DateTime.Today
            };

        await modal.ShowAsync();
    }

    public void OnHide()
    {
        upsertTransaction = null;
    }

    public async Task OpenForExistingTransactionAsync(TransactionModel transaction, int? bankAccountId)
    {
        upsertTransaction = transaction.ToUpsertModel(bankAccountId);

        await modal.ShowAsync();
    }

    public async Task UpsertTransaction(UpsertTransactionModel validTransaction)
    {
        var upsertedTransaction = await transactionService.UpsertTransactionAsync(validTransaction);

        await OnTransactionsUpserted.InvokeAsync(new TransactionUpsertedEvent
            {
                Created = validTransaction.IsNew,
                Transaction = upsertedTransaction
            });

        await modal.HideAsync();
    }

    public class TransactionUpsertedEvent
    {
        public bool Created { get; set; }

        public TransactionModel Transaction { get; set; }
    }
}