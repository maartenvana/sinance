@inject ITransactionService transactionService
@inject ICategoryService categoryService
@inject IUserNotificationService userNotificationService
@using Sinance.BlazorApp.Business.Model.Transaction
@using Sinance.BlazorApp.Components.Core.Modal
@using Sinance.BlazorApp.Components.Transactions.Modal
@using Sinance.BlazorApp.Components.Core.PagingTable
@using System.Globalization
@using static Sinance.BlazorApp.Components.Transactions.Modal.UpsertTransactionModal
@using static Sinance.BlazorApp.Components.Transactions.Modal.SplitTransactionModal

@using static Sinance.BlazorApp.Components.Transactions.Modal.SelectTransactionCategoryModal

<div class="card shadow mb-4">
    <div class="card-header">
        <ul class="nav nav-pills card-header-pills float-end">
            <li class="nav-item">
                <button class="nav-link" @onclick="OpenCategorySelectionModalForSelected">Set Category</button>
            </li>
            <li class="nav-item">
                <button class="nav-link" @onclick="OpenCreateTransactionModal">Add Transaction</button>
            </li>
        </ul>
    </div>
    <div class="card-body no-padding">
        <SelectablePagingTable @ref=table
                               Page="FilterModel.Page"
                               PageSize="FilterModel.PageSize"
                               TRowDataType="TransactionModel"
                               LoadMoreFunc="LoadMoreTransactionsAsync"
                               TableCss="transaction-table"
                               RowIdFunc="GetTransactionId">
            <HeaderTemplate>
                <th class="date" width="100">Date</th>
                <th class="category" width="75">Type</th>
                <th class="name">Name</th>
                <th class="amount">Amount</th>
                <th class="description">Description</th>
                <th class="actions" width="150"></th>
            </HeaderTemplate>
            <RowTemplate Context="row">
                <td class="date">
                    @row.RowData.Date.ToShortDateString()
                </td>
                <td class="category">
                    <CategoryShortNameBadge 
                        Category="GetCategoryModelForTransaction(row.RowData)" 
                        OnClick="async () => await OpenCategoryModalForSingle(row.RowData)" />
                </td>
                <td class="name">
                    @row.RowData.Name
                </td>
                <td class="amount">
                    <span class="badge bg-@(row.RowData.Amount > 0 ? "success" : "danger")">
                        @row.RowData.Amount.ToString("C2", CultureInfo.CurrentCulture)
                    </span>
                </td>
                <td class="description">
                    @row.RowData.Description
                </td>
                <td>
                    <button class="btn btn-warning" @onclick="async () => await OpenSplitTransactionModalForSingle(row.RowData)">S</button>
                    <button class="btn btn-primary" @onclick="async () => await OpenEditTransactionModal(row.RowData)">E</button>
                    <button class="btn btn-danger" @onclick="async () => await StartDeleteTransaction(row.RowData)">D</button>
                </td>
            </RowTemplate>
        </SelectablePagingTable>

        <SelectTransactionCategoryModal @ref="selectTransactionCategoryModal"
                                        OnTransactionsUpdated="TransactionsUpdated"></SelectTransactionCategoryModal>

        <SplitTransactionModal @ref="splitTransactionModal"
                               OnTransactionsUpdated="TransactionsSplitted"></SplitTransactionModal>

        <UpsertTransactionModal @ref="upsertTransactionModal"
                                OnTransactionsUpserted="TransactionsUpserted"></UpsertTransactionModal>

        <ConfirmModal @ref="confirmDeleteTransactionModal" TModel="TransactionModel"
                      OnConfirm="ConfirmDeleteTransaction"></ConfirmModal>
    </div>
</div>

@code {
    [Parameter]
    public SearchTransactionsFilterModel FilterModel { get; set; } = new();

    private SelectTransactionCategoryModal selectTransactionCategoryModal;
    private SplitTransactionModal splitTransactionModal;
    private UpsertTransactionModal upsertTransactionModal;

    private List<CategoryModel> AllCategories { get; set; }

    private ConfirmModal<TransactionModel> confirmDeleteTransactionModal;

    private SelectablePagingTable<TransactionModel> table;

    public async Task RefreshAsync() => await table.RefreshAsync();

    public string GetTransactionId(TransactionModel model) => model.Id.ToString();

    protected override void OnInitialized()
    {
        AllCategories = categoryService.GetAllCategories();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await RefreshAsync();
    }

    private CategoryModel GetCategoryModelForTransaction(TransactionModel transactionModel)
    {
        return AllCategories.SingleOrDefault(x => x.Id == transactionModel.CategoryId);
    }

    public async Task OpenSplitTransactionModalForSingle(TransactionModel transaction) =>
    await splitTransactionModal.OpenForTransactionsAsync(transaction, GetCategoryModelForTransaction(transaction));

    public async Task OpenEditTransactionModal(TransactionModel transactionModel)
    {
        await upsertTransactionModal.OpenForExistingTransactionAsync(transactionModel, FilterModel.BankAccountId);
    }

    public async void OpenCreateTransactionModal()
    {
        await upsertTransactionModal.OpenForNewTransactionAsync(FilterModel.BankAccountId);
    }

    private async Task ConfirmDeleteTransaction(TransactionModel transactionModel)
    {
        await transactionService.DeleteTransactionAsync(new DeleteTransactionModel
            {
                TransactionId = transactionModel.Id
            });

        table.DeleteRow(transactionModel);
    }

    private async Task StartDeleteTransaction(TransactionModel transactionModel)
    {
        await confirmDeleteTransactionModal.PromptConfirmForModelAsync(
            title: $"Confirm: Delete transaction",
            message: $"Are you sure you want to delete transaction: '{transactionModel.Name}'?",
            model: transactionModel);
    }

    public void TransactionsUpserted(TransactionUpsertedEvent eventData)
    {
        if (eventData.Created)
        {
            table.InsertRowData(
                transaction => transaction.Date == eventData.Transaction.Date,
                new TransactionModel[] { eventData.Transaction });
        }
        else
        {
            table.UpdateRowData(eventData.Transaction);
        }
    }

    public async void OpenCategorySelectionModalForSelected()
    {
        if (table.SelectedRows.Any())
        {
            await selectTransactionCategoryModal.OpenForTransactionsAsync(table.SelectedRows);
        }
        else
        {
            userNotificationService.ShowError("No transactions selected");
        }
    }

    public async Task OpenCategoryModalForSingle(TransactionModel transaction) =>
        await selectTransactionCategoryModal.OpenForTransactionsAsync(new List<TransactionModel> { transaction });

    public void TransactionsSplitted(TransactionsSplittedEvent eventData)
    {
        table.ReplaceRowData(
            eventData.OriginalTransaction.Id.ToString(),
            eventData.NewTransactions);

        userNotificationService.ShowSuccess($"Transaction was split into {eventData.NewTransactions.Count} new transaction(s)");
    }

    public void TransactionsUpdated(TransactionsCategoryUpdatedEvent eventModel)
    {
        foreach (var newTransaction in eventModel.Transactions)
        {
            table.UpdateRowData(newTransaction);
        }

        userNotificationService.ShowSuccess($"Updated {eventModel.Transactions.Count} transaction(s) categories");
    }

    public async Task<List<TransactionModel>> LoadMoreTransactionsAsync(int page, int pageSize)
    {
        try
        {
            FilterModel.PageSize = pageSize;
            FilterModel.Page = page;

            return await transactionService.SearchTransactionsPagedAsync(FilterModel);
        }
        catch (Exception)
        {
            userNotificationService.ShowError("Exception during transaction retrieval");

            return new List<TransactionModel>();
        }
        finally
        {
            StateHasChanged();
        }
    }
}
